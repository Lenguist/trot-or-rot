===== LOG CARD =====
Date/Time: 20241219_154758
Learner: HillClimberV1

Robot Assumptions:
hip_max_force: 128.2408076923077
knee_max_force: 128.2408076923077
position_gain: 0.8
velocity_gain: 0.8

Learner Parameters:
max_iterations: 300
mutation_rate: 0.5
mutation_scale: 0.1
log_interval: 50

Simulation Parameters:
fps: 240
run_duration: 10
settling_time: 0.5
floor_friction: 0.5

User Notes:
testing new format, not expecting this run to be stellar

=== FINAL RESULTS ===
Best Distance (m): 1.0839
Speed (m/s): 0.1084 (which is 10.84 cm/s)

Final Functions:
Model-Agnostic Representation:
Here we used a sinusoidal model, but we store them as generic functions.
Format: each joint has an expression and parameters.

Joint 0: a + b * math.sin(omega*t + c) with {'a': -9.753672892609126, 'b': 15, 'c': 5.860134599691204, 'omega': 9.710081496118098}
Joint 1: a + b * math.sin(omega*t + c) with {'a': 1.200742431441206, 'b': -8.647192821298482, 'c': 5.032831785021649, 'omega': 9.710081496118098}
Joint 2: a + b * math.sin(omega*t + c) with {'a': 6.187022758393482, 'b': 12.435264263733655, 'c': 1.4952270209347605, 'omega': 9.710081496118098}
Joint 3: a + b * math.sin(omega*t + c) with {'a': -7.164270311125594, 'b': -5.0892624118574075, 'c': 5.505965387459126, 'omega': 9.710081496118098}
Joint 4: a + b * math.sin(omega*t + c) with {'a': -11.876765353882691, 'b': 3.5572168715333983, 'c': 2.925781654417367, 'omega': 9.710081496118098}
Joint 5: a + b * math.sin(omega*t + c) with {'a': 2.156505450279031, 'b': 1.6064485806629754, 'c': 5.27552351716867, 'omega': 9.710081496118098}
Joint 6: a + b * math.sin(omega*t + c) with {'a': -1.2090431364289915, 'b': -8.472398474970772, 'c': 2.7802956341802805, 'omega': 9.710081496118098}
Joint 7: a + b * math.sin(omega*t + c) with {'a': -12.606280593902927, 'b': -3.2365991606331903, 'c': 1.594391916347563, 'omega': 9.710081496118098}
